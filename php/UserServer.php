<?php
/**
 * Created by PhpStorm.
 * User: CoolCats
 * Date: 2019/3/29
 * Time: 16:50
 */

include_once 'dbconfig.php';
include_once 'Server.php';//引入Server.php
session_start();

class UserServer extends Server
{
    protected $tb_user = "qq_user";//用户账户数据表
    protected $tb_userdetail = "user_detail";//用户详细信息表
    protected $tb_friendship = "qq_friendships";//好友关系表
    protected $tb_messages = "qq_messages";//消息表
    protected $tb_posts = "qq_posts";//post
    protected $_params = NULL;

    public function __construct()
    {
        parent::__construct();
    }

    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }

    /**
     * 处理注册逻辑
     */
    private function onRegister()
    {
        $query1 = "insert into " . $this->tb_user . " (username," . '"password")' . " values($1,md5($2))";
        $query2 = "insert into " . $this->tb_userdetail
            . " (id,realname,gender,email,mobile,industry)"
            . " values($1,$2,$3,$4,$5,$6)";

        $params = $this->_requests->params;
        $username = $params->username;
        $password = $params->password;
        $realname = $params->realname;
        $gender = $params->gender;
        $email = $params->email;
        $mobile = $params->mobile;
        $industry = $params->industry;

        $this->_pgsql->queryParams($query1, array(
            $username, $password
        ));
        $id = $this->getUserId($username)[0]["id"];
//        var_dump(array(
//            $id, $realname, $gender, $email, $mobile, $industry
//        ));
//        var_dump(array(
//            $username, $password
//        ));

        $this->_pgsql->queryParams($query2, array(
            $id, $realname, $gender, $email, $mobile, $industry
        ));
        $this->makeResponse(true, "注册成功！", array());
        echo $this->_response;//对注册失败进行响应
    }


    /**
     * 主例程
     */
    public function run()
    {
        //登录逻辑
        switch ($this->_requests->type) {
            case "USER_HAS_LOGIN":
                //检查用户是否已经登录
                $this->checkHasLogin();
                break;
            case "USER_LOGIN":
                $this->onLogin();
                break;
            case "USER_REGISTER":
                //检查用户输入
                $isValid = $this->checkInput();
                if ($isValid) {
                    $this->onRegister();

                } else {
                    $this->makeResponse(false, "注册失败，请检查您的输入！", array());
                    echo $this->_response;//对注册失败进行响应
                }
                break;
            case "USER_GET_FRIEND":
                $friends = $this->getFriendsList();
                $this->makeResponse(true, "OK", $friends);
                echo $this->_response;//对注册失败进行响应

                break;
            case "USER_GET_PROFILE":
                //获取用户简介
                break;
            case "USER_SEND_MSG":
                //发送信息
                $this->sendMessage();
                break;
            case "USER_GET_MSG":
                //接受信息
                $this->getFriendMessage();
                break;
        }
    }

    /**
     * 处理登录逻辑, 若用户登录信息正确，则成功登录，否则给出错误提示
     */
    private function onLogin()
    {
        $tb_name = "qq_user";
        //构造SQL语句查询用户是否存在，密码采用md5散列存储,采用limit进行限制，安全、效率
        $query = "select count(1) from " . $tb_name . " where username=$1 and " . '"password"=md5($2) limit 1';
        $params = $this->_requests->params;
        $loginarr = array(
            $params->username, $params->password
        );
        $this->_pgsql->queryParams($query, $loginarr);
        $row = $this->_pgsql->fetchRow();
        if ($row[0] == 1) {//存在用户

            $_SESSION["user"] = $params->username;//设置session
            $id = $this->getUserId($params->username);
//            $friends = $this->getFriendLists($params->username);
//            $profile = $this->getUserProfiles($id[0]);
//            array_push($profile, $params->username);
//            $data = array($friends, $profile);
            $this->makeResponse(true, "LOGIN SUCCESS", NULL);
            echo $this->_response;//对登录成功进行响应
            //设置session
            $_SESSION["USER_ID"] = $id[0];
            $_SESSION["USER_NAME"] = $params->username;
            // show friends lists
        } else {//不存在此用户
            $this->makeResponse(false, "LOGIN FAILURE", NULL);
            echo $this->_response;//对登录失败进行响应

        }
    }

    /**
     * 获取用户简介
     * @param $username
     * @return mixed
     */
    private function getUserProfiles($id)
    {
        $query = "select mobile,email,industry,profession from user_detail" . " where " . '"id"' . "=$1";
        $farr = array($id["id"]);
//        var_dump($query);
//        var_dump($id);
//
//        var_dump($farr);
        $this->_pgsql->queryParams($query, $farr);
        $row = $this->_pgsql->fetchRow();
//        var_dump($row);


        return $row;
    }

    private function getUserId($username)
    {
        $query = "select id from qq_user" . " where username=$1";
        $farr = array($username);
        $this->_pgsql->queryParams($query, $farr);
        $row = $this->_pgsql->fetchAll();

        return $row[0]["id"];
    }

    /**
     * 检查用户是否已经登录
     */
    private function checkHasLogin()
    {
        if (isset($_SESSION["USER_ID"]) && isset($_SESSION["USER_NAME"])) {
            //已设置会话，得到用户好友列表并进行响应
            $friends = $this->getFriendsList();
            $this->makeResponse(true, "Has Login", $friends);
        } else {
            //会话尚未设置
            $this->makeResponse(false, "Has not login", NULL);
        }
        echo $this->_response;

    }

    /**
     *
     */
    private function getFriendsList()
    {
        //查询用户的好友列表
        $query = "
                select
                    A.id,
                    C.id,
                    C.username
                from 
                    qq_user A,
                    qq_friendships B,
                    qq_user C
                where
                    A.id = B.user1 
                and A.username = $1
                and B.user2 = C.id
            ";
        $querydata = array($_SESSION["USER_NAME"]);

//        $querydata = array($this->_params->username);
        $result = $this->_pgsql->queryParams($query, $querydata);
        $friends = array();
        while ($row = pg_fetch_row($result)) {
//        var_dump($row);
            array_push($friends, array(
                "FID" => $row[1],
                "FNAME" => $row[2]
            ));
        }

        return $friends;
//        var_dump($friends);
//        $this->makeResponse(true,"ok!",$friends);
    }

    /**
     * @param $user1
     * @return mixed
     */
    private function getFriendLists($user1)
    {
        $query = "select user2 from qq_friendships" . " where user1=$1";
//        $params = $this->_requests->params;
        $farr = array($user1);
        $this->_pgsql->queryParams($query, $farr);
        $row = $this->_pgsql->fetchAll();
        return $row;
    }

    /**
     * 发送消息
     */
    private function sendMessage()
    {
//        var_dump($this->_requests->params->message);
        $msg = $this->_requests->params->message;
        $fromid = $this->getUserId($_SESSION["USER_NAME"]);
        $query = "insert into qq_messages (fromid,toid,msg) values ($1,$2,$3)";
        $farr = array(
            "fromid" => $fromid,
            "toid" => $this->_requests->params->toid,
            "message" => $msg
        );
//        var_dump($fromid);
        $this->_pgsql->queryParams($query, $farr);
        if (!$this->_pgsql->_result) {
            $this->makeResponse(false, "Not ok!", NULL);

        } else {
            $this->makeResponse(true, "Send OK!", array($msg));
        }
        echo $this->_response;
    }

    private function getFriendMessage()
    {
        $msg = $this->_requests->params->message;
        $toid = $this->getUserId($_SESSION["USER_NAME"]);
        $query = "select 
                        B.id,
                        A.msg,
                        A.sendtime
                  from 
                        qq_messages A,
                        qq_user B 
                  where 
                        A.toid=$1 
                        and B.id=A.fromid";
        $farr = array(
            "toid" => $toid,
        );
//        var_dump($fromid);
        $this->_pgsql->queryParams($query, $farr);
        if (!$this->_pgsql->_result) {
            $this->makeResponse(false, "Not Get!", NULL);

        } else {
            $msg = array();
            while ($row = pg_fetch_row($this->_pgsql->_result)) {
                array_push($msg, array(
                    "FROM" => $row[0],
                    "MSG" => $row[1],
                    "TIME" => $row[2]
                ));
            }
            $this->makeResponse(true, "Get OK!", array($msg));
        }
        echo $this->_response;
        //        var_dump($row);

    }

    /**
     * 检查用户输入
     * @return bool
     */
    private function checkInput()
    {
        return true;
    }

}